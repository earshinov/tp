class SqlModel {
	constructor() {
		globalInit();
		this.db = new alasql.Database();
		initDb(this.db);
	}
	init(model) {
		var db = new alasql.Database();
		initDb(db);
		loadModel(db, model);
		this.db = db;
	}
	query(sql) /* -> [][][] */ {
		var res = this.db.exec(sql);
		if (res.length > 0 && res[0].length > 0 && $.isArray(res[0][0])) {
			// alasql returned multiple datasets
			return res;
		}
		else {
			// alasql returned single dataset
			return [res];
		}
	}
}

module.exports = SqlModel;

var alasql = require("alasql");
var m = require("app/model/ModelClasses");

function globalInit() {
	alasql.options.casesensitive = "false";
	// return rows as arrays, not objects
	alasql.options.modifier = "MATRIX";
}

function initDb(db) {
	db.exec(`
		create table Record (
			number int not null primary key,
			source text not null
		);

		create table ParkingPlace (
			id int not null identity(1,1),
			recordNo int references Record(number),
			number int not null,
			building int not null,
			area number not null
		);

		create table Apartment (
			id int not null identity(1,1),
			recordNo int references Record(number),
			objectType text not null,
			number int not null,
			building int not null,
			floor int not null,
			section int null,
			area number not null
		);

		/* Non-Residential Premise */
		create table NRPremise (
			id int not null identity(1,1),
			recordNo int references Record(number),
			objectType text not null,
			number int null,
			building int not null,
			section int null,
			area number not null
		);
	`);
}

function loadModel(db, model) {
	var records = [];
	for (var key in model.records)
	    if (model.records.hasOwnProperty(key)) {
	    	var record = model.records[key];
	        records.push({ number: key, source: record.source });
	    }
	var Record = records;

	var ParkingPlace = model.objects.filter(function(obj) {
		return obj instanceof m.ParkingPlace;
	});
	var Apartment = model.objects.filter(function(obj) {
		return obj instanceof m.Apartment;
	});
	var NRPremise = model.objects.filter(function(obj) {
		return obj instanceof m.NonResidentialPremise;
	});

	db.exec(`
		INSERT INTO Record(number, source)
		SELECT number, source
		FROM ?;

		INSERT INTO ParkingPlace(recordNo, number, building, area)
		SELECT recordNo, number, building, area
		FROM ?;

		INSERT INTO Apartment(recordNo, objectType, number, building, floor, section, area)
		SELECT recordNo, objectType, number, building, floor, section, area
		FROM ?;

		INSERT INTO NRPremise(recordNo, objectType, number, building, section, area)
		SELECT recordNo, objectType, number, building, section, area
		FROM ?;
	`, [Record, ParkingPlace, Apartment, NRPremise]);
}
