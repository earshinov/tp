class SqlModel {
	constructor() {
		globalInit();
		this.db = new alasql.Database();
		initDb(this.db);
	}
	init(model) {
		var db = new alasql.Database();
		initDb(db);
		loadModel(db, model);
		this.db = db;
	}
	query(sql) /* -> [][][] */ {
		var res = this.db.exec(sql);
		if (res.length > 0 && res[0].length > 0 && $.isArray(res[0][0])) {
			// alasql returned multiple datasets
			return res;
		}
		else {
			// alasql returned single dataset
			return [res];
		}
	}
	swap(other) {
		var tmp = this.db;
		this.db = other.db;
		other.db = tmp;
	}
}

module.exports = SqlModel;

var alasql = require("alasql");
var m = require("app/model/ModelClasses");

function globalInit() {
	alasql.options.casesensitive = "false";
	// return rows as arrays, not objects
	alasql.options.modifier = "MATRIX";
}

function initDb(db) {
	db.exec(`
		create table Record (
			id int not null primary key,
			type text not null,
			number int not null,
			source text,
			owner text
		);

		create table ParkingPlace (
			id int not null identity(1,1),
			record int references Record(id),
			number int not null,
			building int not null,
			area number not null
		);

		create table Apartment (
			id int not null identity(1,1),
			record int references Record(id),
			objectType text not null,
			number int not null,
			originalNumber int,
			building int not null,
			floor int not null,
			landingNumber int,
			section int null,
			area number not null
		);

		/* Non-Residential Premise */
		create table NRPremise (
			id int not null identity(1,1),
			record int references Record(id),
			objectType text not null,
			number int null,
			building int not null,
			section int null,
			area number not null
		);
	`);
}

function loadModel(db, model) {

	for (var i = 0, c = model.records.length; i < c; i++)
		model.records[i].id = i+1;
	for (var i = 0, c = model.objects.length; i < c; i++) {
		var obj = model.objects[i];
		obj.recordId = obj.record.id;
	}

	var Record = model.records;

	var ParkingPlace = model.objects.filter(function(obj) {
		return obj instanceof m.ParkingPlace;
	});
	var Apartment = model.objects.filter(function(obj) {
		return obj instanceof m.Apartment;
	});
	var NRPremise = model.objects.filter(function(obj) {
		return obj instanceof m.NonResidentialPremise;
	});

	db.exec(`
		INSERT INTO Record(id, type, number, source, owner)
		SELECT id, type, number, source, owner
		FROM ?;

		INSERT INTO ParkingPlace(recordId, number, building, area)
		SELECT recordId, number, building, area
		FROM ?;

		INSERT INTO Apartment(recordId, objectType, number, originalNumber, building, floor, landingNumber, section, area)
		SELECT recordId, objectType, number, originalNumber, building, floor, landingNumber, section, area
		FROM ?;

		INSERT INTO NRPremise(recordId, objectType, number, building, section, area)
		SELECT recordId, objectType, number, building, section, area
		FROM ?;
	`, [Record, ParkingPlace, Apartment, NRPremise]);
}
