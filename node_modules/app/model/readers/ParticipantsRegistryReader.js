var BaseCsvReader = require("app/model/readers/BaseCsvReader");

class ParticipantsRegistryReader extends BaseCsvReader {
	constructor(model) {
		super({
			skipRows: 1,
		});
		this._model = model;
		this._records = {}; // recordNumber => _Record
	}
	read(csv, callback) {
		var me = this;
		super.read(csv, function(ex) {
			if (!ex)
				for (var key in me._records)
					if (me._records.hasOwnProperty(key))
						me._records[key].finish();
			callback(ex);
		});
	}
	// @override
	_processRecord(record) {
		var recordNumber = record[3];
		if (!recordNumber)
			// не обрабатываем строки без номера записи
			return;

		recordNumber = utils.parseInt(recordNumber);
		if (recordNumber == null)
			throw new Error("Некорректный номер записи: " + record[2]);

		var source = record[1];
		if (!source)
			throw new Error("Отсутвует строка записи");
		var _record;
		var modelRecord;
		if (!(recordNumber in this._records)) {
			_record = this._records[recordNumber] = new _Record(recordNumber);
			modelRecord = _record.modelRecord();
			this._model.addRecord(modelRecord);
		}
		else {
			_record = this._records[recordNumber];
			modelRecord = _record.modelRecord();
		}
		_record.appendSource(source);

		var objectType = record[4];
		if (!objectType) {
			// строка без объекта
			for (var i = 5; i < record.length; i++)
				if (record[i])
					throw new Error("Строка, не содержащая тип объекта, не должна содержать информации об объекте");
			return;
		}

		var number = record[5];
		// номер объекта опциональный для нежилых помещений
		if (!number || number == "бн")
			number = null;
		else {
			number = utils.parseInt(number);
			if (number == null)
				throw new Error("Некорректный номер объекта: " + record[5]);
		}

		var building = utils.parseInt(record[6]);
		if (building != 1 && building != 2)
			throw new Error("Некорректный номер корпуса: " + record[6]);

		var area = BaseCsvReader.parseCsvFloat(record[9]);
		if (area == null)
			throw new Error("Некорректное значение площади: " + record[9]);

		if (objectType == "машиноместо") {
			if (number == null)
				throw new Error("Некорректный номер объекта: " + record[5]);
			this._model.addObject(new m.ParkingPlace(modelRecord, number, building, area));
			return;
		}

		var section = record[8];
		// номер секции опциональный
		if (!section || section == "нет" || section == "?")
			section = null;
		else {
			section = utils.parseInt(section);
			if (section == null)
				throw new Error("Некорректный номер секции: " + record[8]);
		}

		if (objectType == "неж пом" || objectType.search(/предприятие/i) >= 0 || objectType == "магазин" || objectType == "офис") {
			this._model.addObject(new m.NonResidentialPremise(modelRecord, objectType, number, building, section, area));
			return;
		}

		var floor = utils.parseInt(record[7]);
		if (floor == null)
			throw new Error("Некорректный номер этажа: " + record[7]);

		if (number == null)
			throw new Error("Некорректный номер объекта: " + record[5]);

		var landingNumber = null;
		this._model.addObject(new m.Apartment(modelRecord, objectType, number, building, floor, landingNumber, section, area));
	}
}

module.exports = ParticipantsRegistryReader;

var utils = require("app/utils");
var m = require("app/model/ModelClasses.js");

class _Record {
	constructor(recordNumber) {
		this._source = [];
		this._modelRecord = new m.ParticipantsRegistryRecord(recordNumber, null);
	}
	modelRecord() {
		return this._modelRecord;
	}
	appendSource(source) {
		this._source.push(source);
	}
	finish() {
		this._modelRecord.source = this._source.join("\n");
	}
}
