var BaseCsvReader = require("app/model/readers/BaseCsvReader");

class OwnersRegistryReader extends BaseCsvReader {
	constructor(model) {
		super({
			skipRows: 2,
		});
		this._model = model;
	}
	// @override
	_processRecord(record) {

		var recordNumber = record[0];
		if (!recordNumber)
			// не обрабатываем строки без номера записи
			return;
		recordNumber = utils.parseInt(recordNumber);
		if (recordNumber == null)
			throw new Error("Некорректный номер записи: " + record[2]);

		var number = utils.parseInt(record[1]);
		if (number == null)
			throw new Error("Некорректный номер квартиры: " + record[1]);

		var landingNumber = utils.parseInt(record[2]);
		if (landingNumber == null)
			throw new Error("Некорректный номер на площадке: " + record[2]);

		var floor = utils.parseInt(record[3]);
		if (floor == null)
			throw new Error("Некорректный номер этажа: " + record[3]);

		var building = utils.parseInt(record[4]);
		if (building != 1 && building != 2)
			throw new Error("Некорректный номер корпуса: " + record[4]);

		var section = utils.parseInt(record[5]);
		if (section == null)
			throw new Error("Некорректный номер секции: " + record[5]);

		var area = BaseCsvReader.parseCsvFloat(record[6]);
		if (area == null)
			throw new Error("Некорректное значение площади: " + record[6]);

		var owner = record[7];
		if (!owner)
			throw new Error("Отсутствует владелец: " + record[7]);

		var modelRecord = new m.OwnersRegistryRecord(owner);
		this._model.addRecord(modelRecord);

		var objectType = "квартира";
		this._model.addObject(new m.Apartment(modelRecord, objectType, number, building, floor, landingNumber, section, area));
	}
}

module.exports = OwnersRegistryReader;

var utils = require("app/utils");
var m = require("app/model/ModelClasses.js");
