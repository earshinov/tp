var BaseCsvReader = require("app/model/readers/BaseCsvReader");

class ApartmentsWithoutSectionReader extends BaseCsvReader {
	constructor(model) {
		super({
			skipRows: 1
		});
		this._model = model;
	}
	// @override
	_processRecord(record) {

		var section = utils.parseInt(record[0]);
		if (section == null)
			throw new Error("Некорректный номер секции: " + record[0]);

		var floor = utils.parseInt(record[1]);
		if (floor == null)
			throw new Error("Некорректный номер этажа: " + record[1]);

		var number = utils.parseInt(record[2]);
		if (number == null)
			throw new Error("Некорректный номер квартиры: " + record[2]);

		var recordNumber = utils.parseInt(record[3]);
		if (recordNumber == null)
			throw new Error("Некорректный номер записи: " + record[3]);

		var objects = this._model.objects;
		var foundObject = null;
		for (var i = 0, c = objects.length; i < c; i++) {
			var obj = objects[i];
			if (obj instanceof m.Apartment &&
				obj.floor == floor &&
				obj.number == number &&
				obj.section == null) {

				var _record = obj.record;
				if (!(_record instanceof m.ParticipantsRegistryRecord))
					throw new Error("Найденная запись имеет некорректный тип: " + _record.type);
				if (_record.number != recordNumber)
					throw new Error("Найденная запись имеет некорректный номер: " + _record.number);

				if (foundObject != null)
					throw new Error("Найдено несколько подходящих записей; должна быть одна");
				foundObject = obj;
			}
		}
		if (!foundObject)
			throw new Error("Запись не найдена");
		foundObject.section = section;
	}
}

module.exports = ApartmentsWithoutSectionReader;

var utils = require("app/utils");
var m = require("app/model/ModelClasses");
