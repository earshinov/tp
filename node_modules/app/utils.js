var Arrays = getArrayFunctions();

module.exports = {
	// JS
	parseInt, parseFloat,
	// Arrays
	Arrays,
	// Strings
	cutString,
	// HTML
	htmlEncode,
	// DOM
	createFromHtml,
	// Delegate
	Delegate,
};

// ====================================================
// JS
// ====================================================

function parseInt(value) {
	value = window.parseInt(value, 10);
	return isNaN(value) ? null : value;
}

function parseFloat(value) {
	value = window.parseFloat(value);
	return isNaN(value) ? null : value;
}

// ====================================================
// Arrays
// ====================================================

function getArrayFunctions() {
	return {

		clone: function(a) {
			return a.slice(0);
		}
	};
}

// ====================================================
// Strings
// ====================================================

function cutString(s, maxLength, ellipsis /* = "..." */) {
	if (ellipsis === undefined)
		ellipsis = "...";
	return s.length <= maxLength ? s : s.substring(0, maxLength) + ellipsis;
}

// ====================================================
// HTML
// ====================================================

function htmlEncode(s) {
	return s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
}

// ====================================================
// DOM
// ====================================================

function createFromHtml(html) {
	var div = document.createElement("div");
	div.innerHTML = html;
	if (div.children.length != 1)
		throw new Error("Failed to create DOM element from HTML: " + cutString(html, 20));
	return div.firstElementChild;
}

// ====================================================
// Delegate
// ====================================================

function Delegate() {
	this.handlers = [];
}

Delegate.prototype.bind = function(handler, /* optional */ context) {
	if (handler == null) throw new Error("Argument is null: handler");
	this.handlers.push({ handler: handler, context: context });
};

Delegate.prototype.unbind = function(handler, /* optional */ context) {
	if (handler == null) throw new Error("Argument is null: handler");
	var len = this.handlers.length;
	this.handlers = this.handlers.filter(h => !(h.handler === handler && (context === undefined || h.context === context)));
	if (this.handlers.length == len)
		throw new Error("Handler to unbind was not found");
};

Delegate.prototype.trigger = function(/* optional */ data) {
	if (data === undefined) data = {};
	var handlers = Arrays.clone(this.handlers);
	for (var i = 0, c = handlers.length; i < c; i++) {
		var h = handlers[i];
		h.handler.call(h.context, data);
	}
};

Delegate.prototype.getLength = function() {
	return this.handlers.length;
};
